//-------------------------
// 🌍 Global
//-------------------------

/// If true, includes font face mixins in `_css--font-face.scss` depending on the `css--plex` feature flag
/// @access public
/// @type Bool
/// @group feature-flags
$css--font-face: true !default;

/// If true, includes the `css-helpers()` mixin
/// @access public
/// @type Bool
/// @group feature-flags
$css--helpers: true !default;

/// If true, includes the `css-body()` mixin
/// @access public
/// @type Bool
/// @group feature-flags
$css--body: true !default;

/// If true, the `layer()` mixin sets `box-shadow` values
/// @access public
/// @type Bool
/// @group feature-flags
$css--use-layer: true !default;

/// If true, include reset CSS
/// @access public
/// @type Bool
/// @group feature-flags
$css--reset: true !default;

/// Used with `css--font-face` feature flag, if true, uses Plex font families instead of Helvetica
/// @access public
/// @type Bool
/// @group feature-flags
$css--plex: true !default;

/// This feature flag was used during development of the v10 experimental grid.
/// TODO: remove in next major release. Synced in `feature-flags` as an adapter in the interim
/// @deprecated (For v10) v10 always uses `@carbon/grid`
/// @access public
/// @type Bool
/// @group feature-flags
$css--use-experimental-grid: false !default;

/// This feature flag was used during development of the v10 experimental grid.
/// TODO: remove in next major release. Synced in `feature-flags` as an adapter in the interim.
/// @access public
/// @type Bool
/// @group feature-flags
/// @deprecated (For v10) v10 always uses `@carbon/grid`
$css--use-experimental-grid-fallback: false !default;

/// Set the theme to Gray 10
@import 'vendor/@carbon/themes/scss/themes';
$carbon--theme: $carbon--theme--g10;
// Use the gray 10 theme
@include carbon--theme();

@import 'globals/feature-flags';
@import 'globals/vars';
@import 'globals/colors';
@import 'globals/theme';
@import 'globals/mixins';
@import 'globals/layout';
@import 'globals/spacing';
@import 'globals/typography';
@import 'globals/import-once';
@import 'globals/css--reset';
@import 'globals/css--font-face';
@import 'globals/css--helpers';
@import 'globals/css--body';
@import 'globals/grid';
@import 'globals/charts';

//-------------------------
// ⚠️ Manage deprecations
//-------------------------

/// We flag this variable as true if someone uses the globals/scss/styles.scss
/// entry-point. This allows us to collect all the messages and display them at
/// the end of the file instead of bringing it up per-component.
///
/// If a consumer instead gets the components by importing the partial directly,
/// this variable _will not_ be set to true, so the deprecation message will be
/// displayed after the @import.
/// @access private
/// @type Bool
/// @group global-deprecate
$deprecations--entry: true;

/// Collect all deprecation reasons into this list throughout the import cycle.
/// @access private
/// @type Map
/// @group global-deprecate
$deprecations--reasons: ();

/// This message will be prepended to any deprecation notice.
/// @access private
/// @type String
/// @group global-deprecate
$deprecations--message: 'Deprecated code was found, this code will be removed before the next release of Carbon.';

@import './styles/carbon-components.scss';
@import './styles/experimental.scss';

//-------------------------------------
// 🙈 Hidden (Not exposed on website)
//-------------------------------------

// Cycle through all the deprecation reasons, if any exist, that have been
// accumulated through the @import process.
@if (length($deprecations--reasons) > 0) {
  $deprecations--message: '';
  @each $reason in $deprecations--reasons {
    $deprecations--message: '#{$deprecations--message} REASON: #{$reason}';
  }

  @warn $deprecations--message;
}

@import './styles/carbon-addons-iot-react.scss';
